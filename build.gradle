// Current Supported Commands:
//
// Build Related:
//   clean build - Generate a debug .deb
//   clean release - Generate a release-ready .deb
//
// Test Related:
//   doCoverage - Run all unit + integration tests with coverage
//
// Other:
//   cleanMans - Remove man pages
//   generateMans - Create man pages


buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "gradle.plugin.com.netflix.nebula:gradle-ospackage-plugin:3.6.1"
  }
}

apply plugin: "nebula.ospackage"

// Populate version information
String versionContents = new File("VERSION").text.trim()
def values = versionContents.split('-')

project.ext.set("buildVersion", values[0])
project.ext.set("buildRelease", values[1])

String versionString = "dtf-" + values[0] + "-" + values[1]

if ( values.length == 3) {
    project.ext.set("buildBranch", values[2])
    project.ext.set("versionString", versionString + "." + values[2])

} else {
    project.ext.set("buildBranch", "")
    project.ext.set("versionString", versionString)
}

// Date
String currentDate = new Date().format( 'yyyy-MM-dd' )

project.ext.set("currentDate", currentDate)


// Task Definitions
task makeDeb(type:Deb) {

    packageName = 'android-dtf'
    version = project.buildVersion
    release = project.buildRelease
    maintainer = 'Jake Valletta <javallet@gmail.com>'
    url = 'https://github.com/jakev/dtf'
    summary = 'Android Device Testing Framework (dtf)'
    packageDescription = 'Modular framework for discovering vulnerabilities on Android devices.'
    packageGroup = 'main'

    configurationFile('/etc/bash_completion.d/dtf.bash')

    postUninstall file('deb-scripts/postuninstall')
    postInstall file('deb-scripts/postinstall')

    requires('python')
    requires('python-pip')

    into 'build/'

    /* Move the wheel to a tmp dir */
    from('python-dtf/dist/') {
        fileMode 0640
        into '/tmp/'
    }

    /* Bash Completition */
    from('python-dtf/data-files/etc/') {
        fileType CONFIG
        fileMode 0644
        into '/etc'
    }

    /* dtf Bindings */
    from('dtf-binding/') {
        fileMode 0755
        into '/usr/local/bin'
    }

    /* Binder Links */
    link('/usr/local/bin/dtf_aapt', '/usr/local/bin/dtfbinder', 0755)
    link('/usr/local/bin/dtf_abe', '/usr/local/bin/dtfbinder', 0755)
    link('/usr/local/bin/dtf_apktool', '/usr/local/bin/dtfbinder', 0755)
    link('/usr/local/bin/dtf_axmlprinter2', '/usr/local/bin/dtfbinder', 0755)
    link('/usr/local/bin/dtf_baksmali', '/usr/local/bin/dtfbinder', 0755)
    link('/usr/local/bin/dtf_busybox', '/usr/local/bin/dtfbinder', 0755)
    link('/usr/local/bin/dtf_dex2jar', '/usr/local/bin/dtfbinder', 0755)
    link('/usr/local/bin/dtf_shell', '/usr/local/bin/dtfbinder', 0755)
    link('/usr/local/bin/dtf_smali', '/usr/local/bin/dtfbinder', 0755)

    /* Man pages */
    from('man/') {
        into '/usr/local/man/man1/'
        fileMode 0644
        include '**/*.1'
    }

    from('man/') {
        into '/usr/local/man/man7/'
        fileMode 0644
        include '**/*.7'
    }

    /* Bash support */
    from('bash-dtf/') {
	into '/usr/local/lib/android-dtf/bash/'
	fileMode 0644
	include '**/*.sh'
    }
}

// Run all tests
task doPythonTests() {}

// Build Python files
task buildPython(type:Exec) {

    workingDir 'python-dtf'
    commandLine 'python', 'setup.py', 'bdist_wheel'
}

// Flake8 the Code
task doFlake(type:Exec) {

    workingDir 'python-dtf'
    commandLine 'flake8', './dtf'
}

// pylint the Code
task doLint(type:Exec) {

    workingDir 'python-dtf'
    commandLine 'pylint', './dtf', '--rcfile=./pylint.config'
}

// Run pytest suite
task doPytests(type:Exec) {

    workingDir 'python-dtf'
    commandLine 'python', 'setup.py', 'test'
}

// Generate Coverage information
task doCoverage(type:Exec) {

    workingDir 'python-dtf'
    commandLine 'sh', 'generate_coverage.sh'
}

// Run checkbashisms
task doCheckBashisms {
    doLast {
      exec {
        workingDir 'bash-dtf'
        commandLine 'bash', '-c', 'checkbashisms -f ./*.sh'
      }
      exec {
        workingDir 'dtf-binding'
        commandLine 'bash', '-c', 'checkbashisms -f ./dtfbinder'
      }
    }
}

// Run shellcheck
task doShellCheck {
    doLast {
      exec {
        workingDir 'bash-dtf'
        commandLine 'bash', '-c', 'shellcheck ./*.sh'
      }
      exec {
        workingDir 'dtf-binding'
        commandLine 'bash', '-c', 'shellcheck ./dtfbinder'
      }
    }
}

task deleteIncludedTar(type:Delete) {

    delete 'python-dtf/dtf/included.tar'
}

// Create TAR bundle of included
task tarIncluded(type:Tar) {

    from ('python-dtf/included/')
    include '**/*'
    into ''
    archiveName 'included.tar'
    destinationDir file('python-dtf/dtf/')
}

// Copy version file
task copyVersion(type:Copy) {

    from('.')
    into 'python-dtf/dtf/'
    include('VERSION')
}

// Generate the globals file
task generateGlobals(type:Exec) {

    workingDir 'python-dtf'
    commandLine './gen_globals.py'
}

// Make sure man pages exist
task assertMans() {
    doLast {
        if (new File('man').listFiles().count { it.name ==~ /.*[1-9]$/ } == 0) {
            throw new GradleException('man pages are not processed! Process with generateMans')
        }
    }
}

// Copy the dtfClient APK (Release)
task useReleaseApk(type:Copy) {

    from('dtf-client-app/app/build/outputs/apk/') {
        include '*-release.apk'
    }

    into 'python-dtf/included/dtfClient/'
}

// Copy the dtfClient APK (Debug)
task useDebugApk(type:Copy) {

    from('dtf-client-app/app/build/outputs/apk/') {
        include '*-debug.apk'
    }

    into 'python-dtf/included/dtfClient/'
}

// Build dtfClient APK
task buildReleaseApk(type:GradleBuild) {
    buildFile = 'dtf-client-app/build.gradle'
    tasks = ['assembleRelease']
}

task buildDebugApk(type:GradleBuild) {
    buildFile = 'dtf-client-app/build.gradle'
    tasks = ['assembleDebug']
}

task cleanApk(type:GradleBuild) {
    buildFile = 'dtf-client-app/build.gradle'
    tasks = ['clean']
}

// Run `ronn` on man pages
task generateMans(type:Exec) {

    workingDir 'man'

    String commandString = new String("ronn ./*.ronn --date="
                                + project.currentDate
                                + " --organization=" + project.versionString
                                + " --manual=\"dtf Manual\" --roff")

    commandLine 'bash', '-c', commandString
}

// Remove generated man pages
task cleanMans(type:Delete) {

    delete fileTree('man/') {
        include '*.1'
        include '*.7'
    }
}

// Remove generated API docs
task cleanApiDocs(type:Delete) {

    delete 'api-docs'
}

// Generate a release
task release() {}

// Clean up
clean {

    delete 'build'
    delete 'python-dtf/build'
    delete 'python-dtf/dist'
    delete "python-dtf/dtf.egg-info"
    delete 'python-dtf/dtf/included.tar'
    delete 'python-dtf/dtf/VERSION'
    delete 'python-dtf/included/globals.ini'
    delete fileTree('python-dtf/included/dtfClient') {
        include '*.apk'
    }
}
clean.dependsOn("cleanApk")

// Task Dependencies

doPythonTests.dependsOn doLint
doPythonTests.dependsOn doFlake

// Prepare the python code
buildPython.dependsOn doPythonTests
buildPython.dependsOn tarIncluded
buildPython.dependsOn copyVersion
tarIncluded.dependsOn generateGlobals

// Bundling
tarIncluded.dependsOn deleteIncludedTar
tarIncluded.dependsOn doCheckBashisms
tarIncluded.dependsOn doShellCheck

// Building Debian
makeDeb.dependsOn buildPython
makeDeb.dependsOn assertMans

// We support two builds:
// + Debug - Called by running "build"
// + Release - Called by running "release"
release.dependsOn useReleaseApk
useReleaseApk.dependsOn buildReleaseApk
release.dependsOn makeDeb

build.dependsOn useDebugApk
useDebugApk.dependsOn buildDebugApk
build.dependsOn makeDeb

// Used to run coverage tests
doCoverage.dependsOn buildPython
